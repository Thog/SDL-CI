name: SDL2 Build
on:
  workflow_dispatch:
    inputs:
      prevRev:
        description: 'Revision of the previous release'
        required: false
      dist:
        description: 'Determine if the CI should create a new release'
        required: false
        default: true
      rev:
        description: 'libsdl-org/SDL commit to build'
        required: true

env:
  BUILD_TYPE: Release

jobs:
  build:
    name: ${{ matrix.platform.name }}
    runs-on: ${{ matrix.platform.os }}
    strategy:
      matrix:
        platform:
        - { name: windows-x64,   os: windows-latest, flags: -A x64                                                                                                                             }
        - { name: windows-x86,   os: windows-latest, flags: -A Win32                                                                                                                           }
        - { name: windows-arm64, os: windows-latest, flags: -A ARM64                                                                                                                           }
        - { name: linux-x64,     os: ubuntu-20.04,   flags: -GNinja , target_apt_arch: ":amd64"                                                                                                }
        - { name: linux-x86,     os: ubuntu-20.04,   flags: -GNinja -DSDL_VIDEO_DRIVER_X11_SUPPORTS_GENERIC_EVENTS=1, cmake_configure_env: CFLAGS=-m32 CXXFLAGS=-m32, target_apt_arch: ":i386" }
        - { name: macos,         os: macos-latest,   flags: -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64" -DCMAKE_OSX_DEPLOYMENT_TARGET="10.14"                                                     }
    steps:
    - name: Setup Linux dependencies
      if: runner.os == 'Linux'
      run: |
        sudo dpkg --add-architecture i386
        sudo apt-get update -y -qq
        sudo apt-get install wayland-protocols${{ matrix.platform.target_apt_arch }} \
          pkg-config${{ matrix.platform.target_apt_arch }} \
          ninja-build${{ matrix.platform.target_apt_arch }} \
          libasound2-dev${{ matrix.platform.target_apt_arch }} \
          libdbus-1-dev${{ matrix.platform.target_apt_arch }} \
          libegl1-mesa-dev${{ matrix.platform.target_apt_arch }} \
          libgl1-mesa-dev${{ matrix.platform.target_apt_arch }} \
          libgles2-mesa-dev${{ matrix.platform.target_apt_arch }} \
          libglu1-mesa-dev${{ matrix.platform.target_apt_arch }} \
          libibus-1.0-dev${{ matrix.platform.target_apt_arch }} \
          libpulse-dev${{ matrix.platform.target_apt_arch }} \
          libsdl2-2.0-0${{ matrix.platform.target_apt_arch }} \
          libsndio-dev${{ matrix.platform.target_apt_arch }} \
          libudev-dev${{ matrix.platform.target_apt_arch }} \
          libwayland-dev${{ matrix.platform.target_apt_arch }} \
          libwayland-client++0${{ matrix.platform.target_apt_arch }} \
          wayland-scanner++${{ matrix.platform.target_apt_arch }} \
          libwayland-cursor++0${{ matrix.platform.target_apt_arch }} \
          libx11-dev${{ matrix.platform.target_apt_arch }} \
          libxcursor-dev${{ matrix.platform.target_apt_arch }} \
          libxext-dev${{ matrix.platform.target_apt_arch }} \
          libxi-dev${{ matrix.platform.target_apt_arch }} \
          libxinerama-dev${{ matrix.platform.target_apt_arch }} \
          libxkbcommon-dev${{ matrix.platform.target_apt_arch }} \
          libxrandr-dev${{ matrix.platform.target_apt_arch }} \
          libxss-dev${{ matrix.platform.target_apt_arch }} \
          libxt-dev${{ matrix.platform.target_apt_arch }} \
          libxv-dev${{ matrix.platform.target_apt_arch }} \
          libxxf86vm-dev${{ matrix.platform.target_apt_arch }} \
          libdrm-dev${{ matrix.platform.target_apt_arch }} \
          libgbm-dev\
          libpulse-dev${{ matrix.platform.target_apt_arch }} \
          gcc-multilib${{ matrix.platform.target_apt_arch }} \
          g++-multilib
    - uses: actions/checkout@v2
      with:
        repository: libsdl-org/SDL
        ref: ${{ github.event.inputs.rev }}
    - name: Configure CMake
      run:  ${{ matrix.platform.cmake_configure_env }} cmake -B build ${{ matrix.platform.flags }} -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DSDL_SHARED_ENABLED_BY_DEFAULT=ON -DSDL_STATIC_ENABLED_BY_DEFAULT=ON
    - name: Build
      run: cmake --build build/ --config Release
    - name: Install (Windows)
      run: cmake --install build/ --prefix release_output --config Release
      if: runner.os == 'Windows'
    - name: Install
      run: sudo cmake --install build/ --prefix release_output --config Release
      if: runner.os != 'Windows'
    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: natives-${{ matrix.platform.name }}
        path: |
          release_output/*
  dist:
    name: "Build SDL2 distributable zip"
    needs: ["build"]
    if: github.event.inputs.dist == true
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          repository: libsdl-org/SDL
          ref: ${{ github.event.inputs.rev }}
          fetch-depth: 0
      - name: Download Windows x64 binaries
        uses: actions/download-artifact@v2
        with:
          name: natives-windows-x64
          path: releases/windows-x64
      - name: Download Windows x86 binaries
        uses: actions/download-artifact@v2
        with:
          name: natives-windows-x86
          path: releases/windows-x86
      - name: Download Windows ARM64 binaries
        uses: actions/download-artifact@v2
        with:
          name: natives-windows-arm64
          path: releases/windows-arm64
      - name: Download MacOS binaries
        uses: actions/download-artifact@v2
        with:
          name: natives-macos
          path: releases/macos
      - name: Download Linux binaries
        uses: actions/download-artifact@v2
        with:
          name: natives-linux
          path: releases/linux
      - name: Remove temporary artifacts
        uses: geekyeggo/delete-artifact@v1
        with:
          name: |
            natives-windows-x64
            natives-windows-x86
            natives-windows-arm64
            natives-macos
            natives-linux-x64
            natives-linux-x86
      - name: Pack Windows x64 binaries
        run: |
          cd releases/windows-x64 &&
          zip -r ../../natives-windows-x64.zip .
      - name: Pack Windows x86 binaries
        run: |
          cd releases/windows-x86 &&
          zip -r ../../natives-windows-x86.zip .
      - name: Pack Windows ARM64 binaries
        run: |
          cd releases/windows-arm64 &&
          zip -r ../../natives-windows-arm64.zip .
      - name: Pack MacOS binaries
        run: |
          cd releases/macos &&
          zip -r ../../natives-macos.zip .
      - name: Pack Linux x64 binaries
        run: |
          cd releases/linux-x64 &&
          zip -r ../../natives-linux-x64.zip .
      - name: Pack Linux x86 binaries
        run: |
          cd releases/linux-x86 &&
          zip -r ../../natives-linux-x86.zip .
      - name: Get current date and rev
        id: date
        run: |
          echo ::set-output name=date::$(date +'%Y-%m-%d')
          echo ::set-output name=rev::$(git rev-parse --short HEAD)
      - uses: actions/checkout@v2
        with:
          path: sdl-ci-thog
      - name: Generate CHANGELOG.md
        run: |
          cd sdl-ci-thog
          npm i
          node generate_changelog.js ${{github.event.inputs.prevRev}} ${{github.event.inputs.rev}} > CHANGELOG.md
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.date.outputs.date }}
          release_name: Release ${{ steps.date.outputs.date }}(${{ steps.date.outputs.rev }})
          body_path: ./sdl-ci-thog/CHANGELOG.md
          # TODO: This is a horrible hack.
          commitish: "master"
          draft: false
          prerelease: false
      - name: Upload Windows x64 Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./natives-windows-x64.zip
          asset_name:  natives-windows-x64.zip
          asset_content_type: application/zip
      - name: Upload Windows x86 Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./natives-windows-x86.zip
          asset_name:  natives-windows-x86.zip
      - name: Upload Windows ARM64 Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./natives-windows-arm64.zip
          asset_name:  natives-windows-arm64.zip
          asset_content_type: application/zip
      - name: Upload Linux Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./natives-linux.zip
          asset_name:  natives-linux.zip
          asset_content_type: application/zip
      - name: Upload MacOS Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./natives-macos.zip
          asset_name:  natives-macos.zip
          asset_content_type: application/zip
